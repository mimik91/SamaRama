-- V1.0__create_base_schema.sql
-- Consolidated migration for complete database schema

-- ==========================================
-- USERS AND AUTHENTICATION
-- ==========================================

-- Tabela bazowa dla użytkowników
CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    email VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(120),
    verified BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    PRIMARY KEY (id)
);

-- Tabela ról użytkowników
CREATE TABLE user_roles (
    user_id BIGINT NOT NULL,
    role VARCHAR(50) NOT NULL,
    PRIMARY KEY (user_id, role),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Tabela użytkowników indywidualnych (dziedziczy po users)
CREATE TABLE individual_users (
    id BIGINT NOT NULL PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    phone_number VARCHAR(15),
    FOREIGN KEY (id) REFERENCES users(id) ON DELETE CASCADE
);

-- Tabela użytkowników serwisu (dziedziczy po users)
CREATE TABLE service_users (
    id BIGINT NOT NULL PRIMARY KEY,
    bike_service_id BIGINT NOT NULL,
    FOREIGN KEY (id) REFERENCES users(id) ON DELETE CASCADE
);

-- Tabela tokenów weryfikacyjnych
CREATE TABLE verification_tokens (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    token VARCHAR(255) NOT NULL UNIQUE,
    user_id BIGINT NOT NULL,
    expiry_date TIMESTAMP NOT NULL,
    used BOOLEAN DEFAULT FALSE,
    PRIMARY KEY (id),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- ==========================================
-- BIKE SERVICES
-- ==========================================

-- Tabela serwisów rowerowych
CREATE TABLE bike_services (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE,
    street VARCHAR(255),
    building VARCHAR(20),
    flat VARCHAR(20),
    postal_code VARCHAR(10),
    city VARCHAR(100),
    latitude DOUBLE PRECISION,
    longitude DOUBLE PRECISION,
    phone_number VARCHAR(15),
    transport_cost DECIMAL(10,2) DEFAULT 0.00,
    transport_available BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
    PRIMARY KEY (id)
);

-- Dodanie klucza obcego do service_users po utworzeniu bike_services
ALTER TABLE service_users
ADD CONSTRAINT fk_service_users_bike_service_id
    FOREIGN KEY (bike_service_id)
    REFERENCES bike_services(id)
    ON DELETE CASCADE;

-- ==========================================
-- OPENING HOURS
-- ==========================================

CREATE TABLE opening_hours (
    id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY
);

CREATE TABLE opening_intervals (
    id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    opening_hours_id BIGINT NOT NULL,
    day_of_week VARCHAR(10) NOT NULL,
    open_time VARCHAR(5) NOT NULL,
    close_time VARCHAR(5) NOT NULL,
    FOREIGN KEY (opening_hours_id) REFERENCES opening_hours(id)
);

-- Tabela bike_services_registered (rozszerzenie BikeService)
CREATE TABLE bike_services_registered (
    id BIGINT PRIMARY KEY,
    website VARCHAR(255),
    description VARCHAR(1500),
    suffix VARCHAR(100),
    contact_person VARCHAR(255),
    pricelist_info VARCHAR(500),
    pricelist_note VARCHAR(500),
    opening_hours_info VARCHAR(500),
    opening_hours_note VARCHAR(500),
    opening_hours_id BIGINT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id) REFERENCES bike_services(id) ON DELETE CASCADE,
    FOREIGN KEY (opening_hours_id) REFERENCES opening_hours(id) ON DELETE SET NULL
);

-- ==========================================
-- BICYCLES
-- ==========================================

-- Tabela bazowa dla rowerów (kompletnych i niekompletnych)
CREATE TABLE incomplete_bikes (
    id BIGSERIAL,
    brand VARCHAR(20) NOT NULL,
    model VARCHAR(40),
    type VARCHAR(40),
    frame_material VARCHAR(100),
    owner_id BIGINT,
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    production_date DATE,
    PRIMARY KEY (id),
    FOREIGN KEY (owner_id) REFERENCES individual_users(id)
);

-- Tabela dla kompletnych rowerów (dziedziczy po incomplete_bikes)
CREATE TABLE bicycles (
    id BIGINT NOT NULL,
    frame_number VARCHAR(20) UNIQUE,
    PRIMARY KEY (id),
    FOREIGN KEY (id) REFERENCES incomplete_bikes(id) ON DELETE CASCADE
);

-- Tabela zdjęć rowerów
CREATE TABLE bicycle_photos (
    id BIGSERIAL,
    bike_id BIGINT,
    photo_data BYTEA,
    content_type VARCHAR(100),
    file_size BIGINT,
    uploaded_at TIMESTAMP NOT NULL DEFAULT NOW(),
    PRIMARY KEY (id),
    FOREIGN KEY (bike_id) REFERENCES incomplete_bikes(id) ON DELETE CASCADE
);

-- ==========================================
-- ORDERS
-- ==========================================

-- Tabela zamówień transportowych (bazowa)
CREATE TABLE transport_orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    bicycle_id BIGINT NOT NULL,
    client_id BIGINT NOT NULL,
    pickup_date DATE NOT NULL,
    pickup_street VARCHAR(255) NOT NULL,
    pickup_building VARCHAR(20) NOT NULL,
    pickup_apartment VARCHAR(20),
    pickup_city VARCHAR(100) NOT NULL,
    pickup_postal_code VARCHAR(10),
    pickup_latitude DECIMAL(10,8),
    pickup_longitude DECIMAL(11,8),
    pickup_time_from TIME,
    pickup_time_to TIME,
    delivery_street VARCHAR(255) NOT NULL,
    delivery_building VARCHAR(20) NOT NULL,
    delivery_apartment VARCHAR(20),
    delivery_city VARCHAR(100) NOT NULL,
    delivery_postal_code VARCHAR(10),
    delivery_latitude DECIMAL(10,8),
    delivery_longitude DECIMAL(11,8),
    target_service_id BIGINT NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'PENDING',
    order_date TIMESTAMP NOT NULL DEFAULT NOW(),
    transport_price DECIMAL(10,2) NOT NULL,
    estimated_time INTEGER,
    actual_pickup_time TIMESTAMP,
    actual_delivery_time TIMESTAMP,
    transport_notes VARCHAR(500),
    additional_notes VARCHAR(500),
    last_modified_by VARCHAR(100),
    last_modified_date TIMESTAMP,
    pickup_address_id BIGINT,
    PRIMARY KEY (id),
    FOREIGN KEY (bicycle_id) REFERENCES incomplete_bikes(id),
    FOREIGN KEY (client_id) REFERENCES individual_users(id),
    FOREIGN KEY (target_service_id) REFERENCES bike_services(id),
    CHECK (status IN ('PENDING', 'CONFIRMED', 'PICKED_UP', 'IN_SERVICE', 'ON_THE_WAY_BACK', 'FINISHED', 'CANCELLED'))
);

-- Tabela zamówień serwisowych (dziedziczy po transport_orders)
CREATE TABLE service_orders (
    id BIGINT NOT NULL,
    service_price DECIMAL(10,2),
    service_notes VARCHAR(500),
    service_start_date TIMESTAMP,
    service_completion_date TIMESTAMP,
    PRIMARY KEY (id),
    FOREIGN KEY (id) REFERENCES transport_orders(id) ON DELETE CASCADE,
);

-- ==========================================
-- COUPONS
-- ==========================================

CREATE TABLE coupons (
    coupon_code VARCHAR(50) NOT NULL PRIMARY KEY,
    price_after_discount NUMERIC(19, 2) NOT NULL,
    expiration_date DATE NOT NULL,
    usage_count INT NOT NULL DEFAULT 0
);

-- ==========================================
-- ENUMERATIONS
-- ==========================================

-- Tabela enumeracji dla rowerów
CREATE TABLE bicycle_enumerations (
    id BIGSERIAL,
    type VARCHAR(50) NOT NULL UNIQUE,
    PRIMARY KEY (id)
);

-- Tabela wartości enumeracji
CREATE TABLE bicycle_enumeration_values (
    enumeration_id BIGINT NOT NULL,
    value VARCHAR(100) NOT NULL,
    PRIMARY KEY (enumeration_id, value),
    FOREIGN KEY (enumeration_id) REFERENCES bicycle_enumerations(id) ON DELETE CASCADE
);

-- ==========================================
-- REPAIR COVERAGE
-- ==========================================

-- Tabela kategorii pokryć napraw rowerowych
CREATE TABLE bike_repair_coverage_category (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    description VARCHAR(500),
    display_order INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Tabela pokryć napraw rowerowych
CREATE TABLE bike_repair_coverage (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description VARCHAR(500),
    category_id BIGINT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES bike_repair_coverage_category(id) ON DELETE RESTRICT
);

-- Tabela łącząca serwisy z pokryciami napraw
CREATE TABLE bike_service_repair_coverage (
    bike_services_registered_id BIGINT NOT NULL,
    bike_repair_coverage_id BIGINT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (bike_services_registered_id, bike_repair_coverage_id),
    FOREIGN KEY (bike_services_registered_id)
        REFERENCES bike_services_registered(id) ON DELETE CASCADE,
    FOREIGN KEY (bike_repair_coverage_id)
        REFERENCES bike_repair_coverage(id) ON DELETE CASCADE
);

-- ==========================================
-- PRICELIST SYSTEM
-- ==========================================

-- Tabela kategorii cennika (współdzielona między serwisami)
CREATE TABLE pricelist_categories (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    description VARCHAR(500),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Tabela pozycji cennika (bez ceny - cena będzie w tabeli łączącej)
CREATE TABLE pricelist_items (
    id BIGSERIAL PRIMARY KEY,
    service_name VARCHAR(200) NOT NULL,
    description TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Tabela łącząca serwisy z kategoriami
CREATE TABLE bike_service_pricelist_categories (
    id BIGSERIAL PRIMARY KEY,
    bike_service_id BIGINT NOT NULL,
    pricelist_category_id BIGINT NOT NULL,
    display_order INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (bike_service_id) REFERENCES bike_services_registered(id) ON DELETE CASCADE,
    FOREIGN KEY (pricelist_category_id) REFERENCES pricelist_categories(id) ON DELETE CASCADE,
    UNIQUE(bike_service_id, pricelist_category_id)
);

-- Tabela łącząca pozycje cennika z kategoriami
CREATE TABLE pricelist_item_categories (
    id BIGSERIAL PRIMARY KEY,
    pricelist_item_id BIGINT NOT NULL,
    pricelist_category_id BIGINT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (pricelist_item_id) REFERENCES pricelist_items(id) ON DELETE CASCADE,
    FOREIGN KEY (pricelist_category_id) REFERENCES pricelist_categories(id) ON DELETE CASCADE,
    UNIQUE(pricelist_item_id, pricelist_category_id)
);

-- Główna tabela łącząca - serwisy z pozycjami cennika (z cenami)
CREATE TABLE bike_service_pricelist_items (
    id BIGSERIAL PRIMARY KEY,
    bike_service_id BIGINT NOT NULL,
    pricelist_item_id BIGINT NOT NULL,
    price VARCHAR(100),
    display_order INTEGER NOT NULL DEFAULT 0,
    service_specific_note VARCHAR(500),
    is_active BOOLEAN NOT NULL DEFAULT true,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (bike_service_id) REFERENCES bike_services_registered(id) ON DELETE CASCADE,
    FOREIGN KEY (pricelist_item_id) REFERENCES pricelist_items(id) ON DELETE CASCADE,
    UNIQUE(bike_service_id, pricelist_item_id)
);

-- ==========================================
-- FUNCTIONS AND TRIGGERS
-- ==========================================

-- Funkcja dla update_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Triggery dla updated_at
CREATE TRIGGER update_bike_services_registered_updated_at
    BEFORE UPDATE ON bike_services_registered
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_bike_repair_coverage_category_updated_at
    BEFORE UPDATE ON bike_repair_coverage_category
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_bike_repair_coverage_updated_at
    BEFORE UPDATE ON bike_repair_coverage
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_pricelist_categories_updated_at
    BEFORE UPDATE ON pricelist_categories
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_pricelist_items_updated_at
    BEFORE UPDATE ON pricelist_items
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_bike_service_pricelist_items_updated_at
    BEFORE UPDATE ON bike_service_pricelist_items
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- ==========================================
-- INDEXES
-- ==========================================

-- Repair coverage indexes
CREATE INDEX idx_bike_repair_coverage_category_id ON bike_repair_coverage(category_id);
CREATE INDEX idx_bike_repair_coverage_category_display_order ON bike_repair_coverage_category(display_order);
CREATE INDEX idx_bike_service_repair_coverage_service_id ON bike_service_repair_coverage(bike_services_registered_id);
CREATE INDEX idx_bike_service_repair_coverage_coverage_id ON bike_service_repair_coverage(bike_repair_coverage_id);

-- Pricelist indexes
CREATE INDEX idx_pricelist_categories_name ON pricelist_categories(name);
CREATE INDEX idx_pricelist_items_service_name ON pricelist_items(service_name);
CREATE INDEX idx_bike_service_pricelist_categories_bike_service ON bike_service_pricelist_categories(bike_service_id);
CREATE INDEX idx_bike_service_pricelist_categories_category ON bike_service_pricelist_categories(pricelist_category_id);
CREATE INDEX idx_bike_service_pricelist_categories_display_order ON bike_service_pricelist_categories(display_order);
CREATE INDEX idx_pricelist_item_categories_item ON pricelist_item_categories(pricelist_item_id);
CREATE INDEX idx_pricelist_item_categories_category ON pricelist_item_categories(pricelist_category_id);
CREATE INDEX idx_bike_service_pricelist_items_bike_service ON bike_service_pricelist_items(bike_service_id);
CREATE INDEX idx_bike_service_pricelist_items_item ON bike_service_pricelist_items(pricelist_item_id);
CREATE INDEX idx_bike_service_pricelist_items_display_order ON bike_service_pricelist_items(display_order);
CREATE INDEX idx_bike_service_pricelist_items_active ON bike_service_pricelist_items(is_active);

-- ==========================================
-- COMMENTS
-- ==========================================

COMMENT ON TABLE users IS 'Tabela bazowa dla wszystkich użytkowników';
COMMENT ON TABLE individual_users IS 'Użytkownicy indywidualni - dziedziczą po users';
COMMENT ON TABLE service_users IS 'Użytkownicy serwisu - dziedziczą po users';
COMMENT ON TABLE pricelist_categories IS 'Kategorie cennika współdzielone między serwisami';
COMMENT ON TABLE pricelist_items IS 'Pozycje cennika bez cen - ceny są w bike_service_pricelist_items';
COMMENT ON TABLE bike_service_pricelist_categories IS 'Relacja Many-to-Many między serwisami a kategoriami';
COMMENT ON TABLE pricelist_item_categories IS 'Relacja Many-to-Many między pozycjami a kategoriami';
COMMENT ON TABLE bike_service_pricelist_items IS 'Główna tabela łącząca z cenami specyficznymi dla serwisu';