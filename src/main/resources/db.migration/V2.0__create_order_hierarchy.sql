-- Tworzenie bazowej tabeli orders
CREATE TABLE orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,

    -- Podstawowe informacje o zamówieniu
    bicycle_id BIGINT NOT NULL,
    client_id BIGINT NOT NULL,

    -- Informacje o odbiorze
    pickup_date DATE NOT NULL,
    pickup_address VARCHAR(255) NOT NULL,
    pickup_latitude DECIMAL(10,8),
    pickup_longitude DECIMAL(11,8),

    -- Status i daty
    status VARCHAR(20) NOT NULL DEFAULT 'PENDING',
    order_date TIMESTAMP NOT NULL DEFAULT NOW(),

    -- Cena
    price DECIMAL(10,2) NOT NULL,

    -- Notatki
    additional_notes VARCHAR(500),

    -- Metadane
    last_modified_by VARCHAR(100),
    last_modified_date TIMESTAMP,

    PRIMARY KEY (id),
    FOREIGN KEY (bicycle_id) REFERENCES incomplete_bikes(id),
    FOREIGN KEY (client_id) REFERENCES incomplete_users(id)
);

-- Modyfikacja istniejącej tabeli service_orders
-- 1. Dodanie kolumn które nie istnieją (jeśli nie ma ich w obecnej strukturze)
ALTER TABLE service_orders
    ADD COLUMN IF NOT EXISTS service_notes VARCHAR(500);

-- 2. Usunięcie kolumn które będą w tabeli orders
-- UWAGA: Najpierw skopiujemy dane, potem usuniemy kolumny

-- Tabela transport_orders (nowa)
CREATE TABLE transport_orders (
    id BIGINT NOT NULL,

    -- Typ transportu
    transport_type VARCHAR(30) NOT NULL DEFAULT 'TO_SERVICE_ONLY',

    -- Serwis docelowy (wymagany)
    target_service_id BIGINT NOT NULL,

    -- Czas odbioru
    pickup_time_from TIME,
    pickup_time_to TIME,

    -- Status i daty transportu
    transport_status VARCHAR(30) NOT NULL DEFAULT 'PENDING',
    estimated_delivery_time TIMESTAMP,
    actual_delivery_time TIMESTAMP,

    -- Informacje o transporcie
    transport_notes VARCHAR(500),
    estimated_time INTEGER, -- w minutach

    -- Opcjonalne informacje o serwisie (dla kombinowanych)
    service_package_id BIGINT,
    service_package_code VARCHAR(20),
    service_price DECIMAL(10,2),

    PRIMARY KEY (id),
    FOREIGN KEY (id) REFERENCES orders(id) ON DELETE CASCADE,
    FOREIGN KEY (target_service_id) REFERENCES bike_services(id),
    FOREIGN KEY (service_package_id) REFERENCES service_packages(id)
);

-- Dodanie check constraints
ALTER TABLE orders
    ADD CONSTRAINT chk_order_status
    CHECK (status IN ('PENDING', 'CONFIRMED', 'PICKED_UP', 'IN_SERVICE', 'COMPLETED', 'DELIVERED', 'CANCELLED'));

ALTER TABLE transport_orders
    ADD CONSTRAINT chk_transport_type
    CHECK (transport_type IN ('TO_SERVICE_ONLY', 'SERVICE_WITH_TRANSPORT'));

ALTER TABLE transport_orders
    ADD CONSTRAINT chk_transport_status
    CHECK (transport_status IN ('PENDING', 'PICKED_UP', 'IN_TRANSIT', 'DELIVERED_TO_SERVICE', 'COMPLETED'));

-- Dodanie indeksów
CREATE INDEX idx_orders_client ON orders(client_id);
CREATE INDEX idx_orders_bicycle ON orders(bicycle_id);
CREATE INDEX idx_orders_pickup_date ON orders(pickup_date);
CREATE INDEX idx_orders_status ON orders(status);

CREATE INDEX idx_service_orders_package ON service_orders(service_package_id);

CREATE INDEX idx_transport_orders_target_service ON transport_orders(target_service_id);
CREATE INDEX idx_transport_orders_transport_status ON transport_orders(transport_status);
CREATE INDEX idx_transport_orders_transport_type ON transport_orders(transport_type);